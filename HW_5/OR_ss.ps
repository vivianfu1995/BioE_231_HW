%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.9
%%CreationDate: Tue Sep 25 12:35:35 2018
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -T 5.000000 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGGCGACCCUGAUGAGCUUGGUUGAGUAUUUACAGCUCCAUACAUGAGGUGUUCUCCCUACGCAAGUUCGAUCAGGCGAAACGGUGAAAGCCGUAGGUUGCCC\
) def
/coor [
[71.47288513 221.74510193]
[71.47288513 206.74510193]
[71.47288513 191.74510193]
[71.47288513 176.74510193]
[71.47288513 161.74510193]
[71.47288513 146.74510193]
[71.47288513 131.74510193]
[71.47288513 116.74510956]
[67.01034546 102.42429352]
[58.48937225 90.07953644]
[49.96839905 77.73477936]
[41.44742966 65.39002228]
[32.92645645 53.04526138]
[24.22001266 40.83060455]
[15.33008003 28.74883842]
[6.44014692 16.66707230]
[-2.44978571 4.58530521]
[-11.33971882 -7.49646187]
[-20.22965240 -19.57822800]
[-29.11958504 -31.65999603]
[-38.19097519 -43.60611725]
[-47.44176102 -55.41387177]
[-62.04326248 -61.50539780]
[-63.80173492 -76.29583740]
[-78.40323639 -82.38736725]
[-80.16171265 -97.17780304]
[-92.67662048 -95.07029724]
[-104.81146240 -98.52966309]
[-114.22453308 -106.82322693]
[-119.12745667 -118.29182434]
[-118.62472534 -130.68147278]
[-112.87664032 -141.58630371]
[-121.39761353 -153.93106079]
[-129.91857910 -166.27581787]
[-144.12564087 -173.23783875]
[-144.98788452 -188.10746765]
[-153.50886536 -200.45222473]
[-162.02983093 -212.79698181]
[-177.61434937 -214.08419800]
[-188.68893433 -225.12446594]
[-190.02450562 -240.70491028]
[-180.99046326 -253.46891785]
[-165.85238647 -257.38973999]
[-151.75802612 -250.61604309]
[-145.36228943 -236.34619141]
[-149.68507385 -221.31796265]
[-141.16410828 -208.97320557]
[-132.64312744 -196.62844849]
[-119.04553986 -190.54939270]
[-117.57382202 -174.79678345]
[-109.05285645 -162.45202637]
[-100.53188324 -150.10726929]
[-83.01234436 -150.57960510]
[-68.51676178 -140.45564270]
[-62.82971954 -123.55056763]
[-68.35395813 -106.42858887]
[-54.41413498 -101.18162537]
[-51.99398422 -85.54661560]
[-38.05416107 -80.29965973]
[-35.63400650 -64.66464996]
[-26.38322449 -52.85689926]
[-19.66862488 -49.47649765]
[-17.03781700 -40.54993057]
[-8.14788437 -28.46816254]
[0.74204832 -16.38639450]
[9.63198090 -4.30462790]
[18.52191353 7.77713919]
[27.41184616 19.85890579]
[36.30178070 31.94067383]
[42.91121674 35.52233505]
[45.27121735 44.52429199]
[53.79218674 56.86904907]
[62.31315994 69.21380615]
[70.83412933 81.55856323]
[79.35510254 93.90332031]
[85.22235870 85.19046783]
[94.28802490 80.50318909]
[104.19248199 80.73970032]
[112.50705719 85.55613708]
[117.32954407 93.52033997]
[117.71743774 102.52411652]
[130.31391907 110.66835022]
[142.91041565 118.81258392]
[155.50689697 126.95681763]
[168.10337830 135.10105896]
[184.50006104 135.38548279]
[192.21435547 149.85690308]
[183.31045532 163.62834167]
[166.94793701 162.53292847]
[159.95915222 147.69754028]
[147.36265564 139.55329895]
[134.76617432 131.40907288]
[122.16969299 123.26483917]
[109.57320404 115.12059784]
[98.86649323 119.67869568]
[86.47288513 116.74510956]
[86.47288513 131.74510193]
[86.47288513 146.74510193]
[86.47288513 161.74510193]
[86.47288513 176.74510193]
[86.47288513 191.74510193]
[86.47288513 206.74510193]
[86.47288513 221.74510193]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 69]
[15 68]
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[21 61]
[22 60]
[24 58]
[26 56]
[32 52]
[33 51]
[34 50]
[36 48]
[37 47]
[38 46]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
