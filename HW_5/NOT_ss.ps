%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.9
%%CreationDate: Tue Sep 25 12:35:35 2018
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -T 5.000000 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGCAGGUACAUACAGCUGAUGAGUCCCAAAUAGGACGAAACGCGACACACACCACUAAACCGUGCAGUGUUUUGCGUCCUGUAUUCCACUGC\
) def
/coor [
[76.53194427 327.52972412]
[79.37194061 308.35723877]
[79.87855530 293.36578369]
[80.38516998 278.37435913]
[80.89177704 263.38290405]
[68.17938232 255.62013245]
[61.01174545 242.44892883]
[61.40179062 227.35871887]
[69.34487152 214.40478516]
[82.79314423 207.11842346]
[83.29975891 192.12698364]
[83.80637360 177.13554382]
[84.31298065 162.14408875]
[84.81959534 147.15264893]
[85.32621002 132.16120911]
[73.31119537 123.18126678]
[62.83107758 135.79472351]
[46.71533966 132.75909424]
[41.54246902 117.19716644]
[52.63387299 105.11772919]
[68.57965851 108.94705963]
[70.75721741 102.16855621]
[74.24028015 96.64879608]
[60.55778122 90.50148773]
[46.87528992 84.35417938]
[33.19279480 78.20687866]
[18.51005745 84.05433655]
[4.02624607 77.73019409]
[-1.66565096 62.98645782]
[4.81126785 48.57031631]
[19.61436081 43.03461838]
[33.96121597 49.66358948]
[39.34009933 64.52438354]
[53.02259445 70.67169189]
[66.70508575 76.81899261]
[80.38758087 82.96630096]
[87.26713562 77.35782623]
[95.63327789 74.39286041]
[104.50923920 74.41757202]
[112.85874176 77.42906952]
[123.73062897 67.09456635]
[134.60252380 56.76006317]
[145.47441101 46.42556000]
[156.34629822 36.09105682]
[167.21820068 25.75655365]
[171.88972473 10.64075184]
[186.44509888 7.48002195]
[197.31698608 -2.85448170]
[208.18888855 -13.18898582]
[219.06077576 -23.52348900]
[219.62399292 -39.09013748]
[230.79685974 -49.41592026]
[245.63380432 -48.78304291]
[256.50570679 -59.11754608]
[267.37759399 -69.45204926]
[267.52734375 -85.25563049]
[278.86642456 -96.26476288]
[294.66754150 -95.94792175]
[305.55618286 -84.49308777]
[305.07229614 -68.69620514]
[293.50299072 -57.92929077]
[277.71209717 -58.58015823]
[266.84020996 -48.24565506]
[255.96830750 -37.91114807]
[255.84889221 -23.06118965]
[244.97047424 -12.42565823]
[229.39527893 -12.65159798]
[218.52339172 -2.31709361]
[207.65148926 8.01741028]
[196.77960205 18.35191345]
[192.88571167 32.72852325]
[177.55270386 36.62844467]
[166.68081665 46.96294785]
[155.80891418 57.29745483]
[144.93702698 67.63195801]
[134.06513977 77.96646118]
[123.19324493 88.30096436]
[125.04528046 115.25047302]
[100.31764984 132.66781616]
[99.81103516 147.65927124]
[99.30442810 162.65071106]
[98.79781342 177.64215088]
[98.29119873 192.63359070]
[97.78459167 207.62503052]
[110.71028137 215.80267334]
[117.76072693 229.26327515]
[117.13114929 244.34538269]
[109.09067535 257.00268555]
[95.88322449 263.88952637]
[95.37660980 278.88098145]
[94.86999512 293.87240601]
[94.36338806 308.86386108]
] def
/pairs [
[2 92]
[3 91]
[4 90]
[5 89]
[10 84]
[11 83]
[12 82]
[13 81]
[14 80]
[15 79]
[16 21]
[23 36]
[24 35]
[25 34]
[26 33]
[40 77]
[41 76]
[42 75]
[43 74]
[44 73]
[45 72]
[47 70]
[48 69]
[49 68]
[50 67]
[53 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
